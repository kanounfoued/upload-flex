/**
 *
 * Option 1:
 * read the file as a stream and split it into chunks generated by the browser reader.
 * the size of the chunks will be random.
 *
 *
 *
 * Option 2:
 * the file will be split into chunks of same size (MAX_CHUNK_SIZE)
 *
 */

import { FlexFile } from 'src/types/File.types';
import { SplitType } from 'src/types/Uploader.types';

interface Processor {
  processing: () => void;
}

export class StreamProcessor implements Processor {
  file: FlexFile;

  constructor(file: FlexFile) {
    this.file = file;
  }

  processing() {}
}

export class RegularProcessor implements Processor {
  file: FlexFile;
  chunkSize: number;

  constructor(file: FlexFile, chunkSize: number) {
    this.file = file;
    this.chunkSize = chunkSize;
  }

  processing() {}
}

export default class ProcessorFactory {
  static getProcessor(splitType: SplitType) {
    switch (splitType) {
      case 'regular':
        return (file: FlexFile, chunkSize: number) =>
          new RegularProcessor(file, chunkSize);
      case 'stream':
        return (file: FlexFile) => new StreamProcessor(file);

      default: {
        const _no_more_options: never = splitType;
        return _no_more_options;
      }
    }
  }
}
